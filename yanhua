<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>🎆 手机烟花模拟 🎆</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            background: linear-gradient(to bottom, #000011, #000033);
            overflow: hidden;
            touch-action: none;
            font-family: 'Arial', sans-serif;
            height: 100vh;
        }
        .header {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            text-align: center;
            color: white;
            padding: 15px;
            z-index: 100;
            background: rgba(0, 0, 0, 0.3);
            backdrop-filter: blur(5px);
        }
        h1 {
            font-size: 1.8rem;
            margin-bottom: 5px;
            text-shadow: 0 0 15px #00ffff;
        }
        .instructions {
            font-size: 1rem;
            opacity: 0.9;
        }
        canvas {
            display: block;
            width: 100%;
            height: 100%;
        }
        .controls {
            position: absolute;
            bottom: 20px;
            left: 0;
            width: 100%;
            display: flex;
            justify-content: center;
            gap: 15px;
            z-index: 100;
        }
        button {
            background: linear-gradient(45deg, #ff0080, #8000ff);
            border: none;
            border-radius: 25px;
            color: white;
            padding: 12px 25px;
            font-size: 1rem;
            cursor: pointer;
            box-shadow: 0 0 20px rgba(255, 0, 128, 0.5);
            transition: all 0.3s;
        }
        button:active {
            transform: scale(0.95);
            box-shadow: 0 0 30px rgba(255, 0, 128, 0.8);
        }
        .footer {
            position: absolute;
            bottom: 70px;
            left: 0;
            width: 100%;
            text-align: center;
            color: rgba(255, 255, 255, 0.6);
            font-size: 0.8rem;
            z-index: 100;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>🎆 绚丽烟花模拟 🎆</h1>
        <p class="instructions">点击或触摸屏幕发射烟花</p >
    </div>

    <canvas id="fireworksCanvas"></canvas>

    <div class="footer">
        <p>使用 HTML5 Canvas 制作 | 专为移动设备优化</p >
    </div>

    <div class="controls">
        <button id="autoBtn">自动模式</button>
        <button id="clearBtn">清除烟花</button>
    </div>

    <script>
        // 初始化 Canvas
        const canvas = document.getElementById('fireworksCanvas');
        const ctx = canvas.getContext('2d');
        
        // 设置 Canvas 尺寸
        function resizeCanvas() {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
        }
        window.addEventListener('resize', resizeCanvas);
        resizeCanvas();
        
        // 颜色配置
        const colors = [
            '#FF5252', '#FF4081', '#E040FB', '#7C4DFF',
            '#536DFE', '#448AFF', '#40C4FF', '#18FFFF',
            '#64FFDA', '#69F0AE', '#B2FF59', '#EEFF41',
            '#FFFF00', '#FFD740', '#FFAB40', '#FF6E40'
        ];
        
        // 粒子类
        class Particle {
            constructor(x, y, color) {
                this.x = x;
                this.y = y;
                this.color = color;
                this.velocity = {
                    x: (Math.random() - 0.5) * 12,
                    y: (Math.random() - 0.5) * 12
                };
                this.alpha = 1;
                this.decay = Math.random() * 0.02 + 0.01;
                this.size = Math.random() * 3 + 1;
                this.gravity = 0.1;
                this.resistance = 0.98;
            }
            
            update() {
                this.velocity.y += this.gravity;
                this.velocity.x *= this.resistance;
                this.velocity.y *= this.resistance;
                this.x += this.velocity.x;
                this.y += this.velocity.y;
                this.alpha -= this.decay;
                return this.alpha > 0;
            }
            
            draw() {
                ctx.save();
                ctx.globalAlpha = this.alpha;
                ctx.fillStyle = this.color;
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
                ctx.fill();
                ctx.restore();
            }
        }
        
        // 烟花类
        class Firework {
            constructor(targetX, targetY) {
                this.x = Math.random() * canvas.width;
                this.y = canvas.height;
                this.targetX = targetX;
                this.targetY = targetY;
                this.color = colors[Math.floor(Math.random() * colors.length)];
                this.speed = 10;
                this.angle = Math.atan2(targetY - this.y, targetX - this.x);
                this.velocity = {
                    x: Math.cos(this.angle) * this.speed,
                    y: Math.sin(this.angle) * this.speed
                };
                this.particles = [];
                this.exploded = false;
                this.trail = [];
                this.trailLength = 8;
            }
            
            update() {
                if (!this.exploded) {
                    // 保存轨迹
                    this.trail.push({x: this.x, y: this.y});
                    if (this.trail.length > this.trailLength) {
                        this.trail.shift();
                    }
                    
                    this.x += this.velocity.x;
                    this.y += this.velocity.y;
                    
                    // 检查是否到达目标位置
                    const distance = Math.sqrt(
                        Math.pow(this.targetX - this.x, 2) + 
                        Math.pow(this.targetY - this.y, 2)
                    );
                    
                    if (distance < 10) {
                        this.explode();
                    }
                } else {
                    // 更新粒子
                    this.particles = this.particles.filter(particle => 
                        particle.update()
                    );
                }
            }
            
            explode() {
                this.exploded = true;
                const particleCount = 120 + Math.random() * 50;
                
                for (let i = 0; i < particleCount; i++) {
                    this.particles.push(new Particle(this.x, this.y, this.color));
                }
                
                // 30% 几率创建二次爆炸
                if (Math.random() < 0.3) {
                    setTimeout(() => {
                        for (let i = 0; i < 60; i++) {
                            this.particles.push(new Particle(this.x, this.y, colors[Math.floor(Math.random() * colors.length)]));
                        }
                    }, 200);
                }
            }
            
            draw() {
                if (!this.exploded) {
                    // 绘制轨迹
                    for (let i = 0; i < this.trail.length; i++) {
                        const point = this.trail[i];
                        const alpha = i / this.trail.length * 0.7;
                        ctx.save();
                        ctx.globalAlpha = alpha;
                        ctx.fillStyle = this.color;
                        ctx.beginPath();
                        ctx.arc(point.x, point.y, 2, 0, Math.PI * 2);
                        ctx.fill();
                        ctx.restore();
                    }
                    
                    // 绘制烟花主体
                    ctx.fillStyle = this.color;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 4, 0, Math.PI * 2);
                    ctx.fill();
                    
                    // 绘制光晕
                    const gradient = ctx.createRadialGradient(
                        this.x, this.y, 0,
                        this.x, this.y, 15
                    );
                    gradient.addColorStop(0, this.color + '80');
                    gradient.addColorStop(1, 'transparent');
                    
                    ctx.fillStyle = gradient;
                    ctx.beginPath();
                    ctx.arc(this.x, this.y, 15, 0, Math.PI * 2);
                    ctx.fill();
                } else {
                    this.particles.forEach(particle => particle.draw());
                }
            }
            
            isDone() {
                return this.exploded && this.particles.length === 0;
            }
        }
        
        // 烟花管理器
        class FireworkManager {
            constructor() {
                this.fireworks = [];
                this.autoMode = true;
            }
            
            addFirework(x, y) {
                this.fireworks.push(new Firework(x, y));
            }
            
            addRandomFirework() {
                const x = Math.random() * (canvas.width - 100) + 50;
                const y = Math.random() * (canvas.height / 2) + 50;
                this.addFirework(x, y);
            }
            
            update() {
                this.fireworks.forEach(firework => firework.update());
                this.fireworks = this.fireworks.filter(firework => !firework.isDone());
                
                // 自动模式添加烟花
                if (this.autoMode && Math.random() < 0.04) {
                    this.addRandomFirework();
                }
            }
            
            draw() {
                this.fireworks.forEach(firework => firework.draw());
            }
            
            clear() {
                this.fireworks = [];
            }
            
            toggleAutoMode() {
                this.autoMode = !this.autoMode;
                return this.autoMode;
            }
        }
        
        // 初始化烟花管理器
        const manager = new FireworkManager();
        
        // 事件监听
        canvas.addEventListener('click', (e) => {
            const rect = canvas.getBoundingClientRect();
            const x = e.clientX - rect.left;
            const y = e.clientY - rect.top;
            manager.addFirework(x, y);
        });
        
        canvas.addEventListener('touchstart', (e) => {
            e.preventDefault();
            const rect = canvas.getBoundingClientRect();
            const x = e.touches[0].clientX - rect.left;
            const y = e.touches[0].clientY - rect.top;
            manager.addFirework(x, y);
        });
        
        // 控制按钮
        document.getElementById('autoBtn').addEventListener('click', function() {
            const autoMode = manager.toggleAutoMode();
            this.textContent = autoMode ? '停止自动' : '自动模式';
            this.style.background = autoMode ? 
                'linear-gradient(45deg, #ff0000, #ff8000)' : 
                'linear-gradient(45deg, #ff0080, #8000ff)';
        });
        
        document.getElementById('clearBtn').addEventListener('click', function() {
            manager.clear();
        });
        
        // 动画循环
        function animate() {
            // 创建拖尾效果
            ctx.fillStyle = 'rgba(0, 0, 20, 0.1)';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            manager.update();
            manager.draw();
            
            requestAnimationFrame(animate);
        }
        
        // 启动动画
        animate();
        
        // 添加初始烟花
        setTimeout(() => {
            for (let i = 0; i < 3; i++) {
                setTimeout(() => manager.addRandomFirework(), i * 300);
            }
        }, 1000);
    </script>
</body>
</html>
